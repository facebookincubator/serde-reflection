version: 3
jobs:
  lint:
    docker:
      - image: circleci/rust:buster
    steps:
      - checkout
      - run:
          name: Version Information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install Rust Components
          command: rustup component add rustfmt clippy
      - run:
          name: Component Version Information
          command: cargo fmt -- --version; cargo clippy -- --version
      - run:
          name: Setup Env
          command: |
            echo 'export RUSTFLAGS="-D warnings"' >> $BASH_ENV
      - run:
          name: Lint (rustfmt)
          command: |
            cargo fmt -- --check
      - run:
          name: Lint (clippy)
          command: |
            cargo clippy --all-features
  build:
    docker:
      - image: circleci/rust:buster
    steps:
      - checkout
      - run:
          name: Setup Golang
          command: |
            wget https://golang.org/dl/go1.13.15.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.13.15.linux-amd64.tar.gz
            mkdir -p ~/go/bin
            echo 'export GOROOT="/usr/local/go"' >> $BASH_ENV
            echo 'export GOBIN="$HOME/go/bin"' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOROOT/bin:$GOBIN' >> $BASH_ENV
      - run:
          name: Setup Additional Languages
          command: |
            sudo apt-get update && sudo apt-get upgrade -y
            sudo apt-get install python3-all-dev python3-pip python3-numpy clang llvm default-jdk
            python3 -m pip install pyre-check
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            nvm install v12.18.0
      - run:
          name: Version Information
          command: rustc --version; cargo --version; rustup --version; python3 --version; clang++ --version; javac -version; go version; echo "node $(node -v)"; echo "npm $(npm -v)"
      - run:
          name: Setup Env
          command: |
            echo 'export RUSTFLAGS="-D warnings"' >> $BASH_ENV
      - run:
          name: Build and Test
          # Build all targets to ensure examples are built as well.
          command: |
            cargo build --all-targets
            cargo test
            cargo build --release --all-targets --all-features
            cargo test --release --all-features

  # docs-build and docs-deploy are adapted from
  # https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/.
  docs-build:
    docker:
      - image: circleci/rust:buster
    steps:
      - checkout
      - run:
          name: Version Information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Generate documentation
          command: |
            cargo doc --all-features
      - persist_to_workspace:
          root: target
          paths: doc

  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: target
      - run:
          name: Disable jekyll builds
          command: touch target/doc/.nojekyll
      - run:
          name: Install and configure gh-pages
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@calibra.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "f9:01:7b:01:d0:ea:df:5e:c4:84:38:b7:92:93:e5:c8"
      - run:
          name: Deploy to gh-pages branch
          command: |
            gh-pages --dotfiles --message "[skip ci] documentation update" --dist target/doc

workflows:
  version: 2
  build:
    jobs:
      - lint
      - build
      - docs-build
      - docs-deploy:
          requires:
            - lint
            - build
            - docs-build
          filters:
            branches:
              only: master
